
@startuml

class User {
  + userId: String
  + name: String
  + email: String
  + role: String
  --
  + registerUser(): void
  + login(): boolean
}

class Roles {
  + RoleId: String
  + RoleName: String
  --
  + createRoles(): void
}

class Project {
  + projectId: String
  + projectName: String
  + status: String
  --
  + createProject(): void
  + assignUser(userId: String): void
}

class componenets {
  + materialId: String
  + projectId: String
  + usageQuantity: int
  + quantity_in_stock: int
  --
  + allocateMaterial(): void
}

class Billing {
  + billingId: String
  + projectId: String
  + totalAmount: double
  --
  + generateInvoice(): void
}


User "1" --> "1" Roles : has roles
User "1" --> "*" Billing : has
Project "1" --> "*" Billing : has
User "1" --> "*" Project : works on
Project "*" --> "*" componenets : uses

@enduml


Résumé des relations
User → Roles : Plusieurs utilisateurs peuvent avoir un rôle (ManyToOne).
User → Project : Un utilisateur peut travailler sur plusieurs projets (OneToMany).
User → Billing : Un utilisateur peut avoir plusieurs factures (OneToMany).
Project → Billing : Un projet peut être associé à plusieurs factures (OneToMany).
Project → Components : Un projet peut utiliser plusieurs composants (OneToMany).